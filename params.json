{"name":"Docker-atlassian-jira","tagline":"Docker container running Atlassian JIRA","body":"# Atlassian JIRA in a Docker container\r\n\r\n[![Build Status](https://img.shields.io/circleci/project/cptactionhank/docker-atlassian-jira.svg)](https://circleci.com/gh/cptactionhank/docker-atlassian-jira)\r\n[![Open Issues](https://img.shields.io/github/issues/cptactionhank/docker-atlassian-jira.svg)](https://github.com/cptactionhank/docker-atlassian-jira)\r\n[![Stars on GitHub](https://img.shields.io/github/stars/cptactionhank/docker-atlassian-jira.svg)](https://github.com/cptactionhank/docker-atlassian-jira)\r\n[![Forks on GitHub](https://img.shields.io/github/forks/cptactionhank/docker-atlassian-jira.svg)](https://github.com/cptactionhank/docker-atlassian-jira)\r\n[![Stars on Docker Hub](https://img.shields.io/docker/stars/cptactionhank/atlassian-jira.svg)](https://registry.hub.docker.com/u/cptactionhank/atlassian-jira)\r\n[![Pulls on Docker Hub](https://img.shields.io/docker/pulls/cptactionhank/atlassian-jira.svg)](https://registry.hub.docker.com/u/cptactionhank/atlassian-jira)\r\n\r\nA containerized installation of Atlassian JIRA setup with a goal of keeping the installation as default as possible, but with a few Docker related twists.\r\n\r\nWant to help out, check out the contribution section.\r\n\r\n## Important changes\r\n\r\nThe Java Runtime Environment has been updated to use OpenJDK 8 and there has been some changes to the installation and home directory to better follow the [Filesystem Hierarchy Standard](http://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.txt). Thanks @frederickding for noticing and suggesting some changes. The environment variable values has been changed accordingly.\r\n\r\nThe installation directory `/opt/atlassian/jira` is not mounted as a volume as standard anymore. Should you need to persist changes in this directory run the container with the additional argument `--volume /opt/atlassian/jira`.\r\n\r\n## I'm in the fast lane! Get me started\r\n\r\nTo quickly get started with running a JIRA instance, first run the following command:\r\n```bash\r\ndocker run --detach --publish 8080:8080 cptactionhank/atlassian-jira:latest\r\n```\r\n\r\nThen use your browser to nagivate to `http://[dockerhost]:8080` and finish the configuration.\r\n\r\n## The slower road to get started\r\n\r\nAn assumption is made that the docker version is at least 1.3.0 for the additional methods `docker exec` and `docker create`.\r\n\r\nThis is how to create the container for running an Atlassian JIRA instance and before you run the command as is take note of the `[your settings]` which should be left out or filled to suit your needs.\r\n\r\n```bash\r\ndocker create [your settings] cptactionhank/atlassian-jira:latest\r\n```\r\n\r\nBelow is some documentation for additional configuration of the JIRA application, keep in mind this is the only tested configuration to suit own needs.\r\n\r\n### Additional JIRA settings\r\n\r\nUse the `CATALINA_OPTS` environment variable for changing advanced settings eg. changing memory consumption or extending plugin loading timeout. All possible configuration settings can be found at the Atlassian JIRA [documentation](https://confluence.atlassian.com/display/JIRA/Recognized+System+Properties+for+JIRA).\r\n\r\nUse with Docker add `--env 'CATALINA_OPTS=[settings]'` as part of your container configuration flags.\r\n\r\n#### JVM memory configuration\r\n\r\nTo change the default memory configuration to your machine with extended memory usage settings add the following string to your `CATALINA_OPTS` environment variable. This will setup the JVM to be running with 128MB as minimum and 1GB as maximum allocatable memory.\r\n\r\n```\r\n-Xms128m -Xmx1024m\r\n```\r\n\r\nMore information about [`-Xms`](http://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/jrdocs/refman/optionX.html#wp999528) and [`-Xmx`](http://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/jrdocs/refman/optionX.html#wp999527) visit [here](http://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/jrdocs/refman/optionX.html).\r\n\r\n#### Plugin loading timeout\r\n\r\nTo change the plugin loading timeout to _5 minutes_ the following string should be added to the `CATALINA_OPTS` environment variable.\r\n\r\n```\r\n-Datlassian.plugins.enable.wait=300\r\n```\r\n\r\n#### Apache Portable Runtime (APR) based Native library for Tomcat\r\n\r\nThis is enabled by default.\r\n\r\n### Running as a different user\r\n\r\nHere will be information on how to run as a different user\r\n\r\n```\r\n--user \"docker-user:docker-group\"\r\n```\r\n\r\nmake sure the home directory `/var/atlassian/jira` is set up with full read, write, and execute permissions on the directory.\r\n\r\nIf not mounting the home directory volume yourself you can change the folder permissions by\r\n\r\n```bash\r\n$ docker exec [container] chown docker-user:docker-group /var/atlassian/jira\r\n```\r\n\r\nPlease note that the exec will be executed as the supplied user in the `docker create` command, ie. `docker-user:docker-group`. You can circumvent this by\r\n\r\n```bash\r\n$ docker run -ti --rm --user root:root --volumes-from [container] java:7 chown docker-user:docker-group /var/atlassian/jira\r\n```\r\n\r\n### Customizations\r\n\r\nExample mounting files to change log4j logging output:\r\n\r\n```\r\n--volume \"[hostpath]/log4j.properties:/opt/atlassian/jira/atlassian-jira/WEB-INF/classes/log4j.properties\"\r\n```\r\n\r\nThis should also be modifiable to suit your needs.\r\n\r\n### Reverse Proxy Support\r\n\r\nYou need to change the `/opt/atlassian/jira/conf/server.xml` file inside the container to include a couple of Connector [attributes](http://tomcat.apache.org/tomcat-8.0-doc/config/http.html#Proxy_Support).\r\n\r\nGaining access to the `server.xml` file on a running container use the following docker command edited to suit your setup\r\n\r\n```bash\r\n$ docker run -ti --rm --volumes-from <container> ubuntu:latest vi /opt/atlassian/jira/conf/server.xml\r\n```\r\n\r\nWithin this container the file can be accessed and edited to match your configuration (remember to restart the JIRA container after).\r\n\r\n#### HTTP\r\n\r\nFor a reverse proxy server listening on port 80 (HTTP) for inbound connections add and edit the following connector attributes to suit your setup.\r\n\r\n```xml\r\n<connector ...\r\n   proxyName=\"example.com\"\r\n   proxyPort=\"80\"\r\n   scheme=\"http\"\r\n   ...\r\n></connector>\r\n```\r\n\r\n#### HTTPS\r\n\r\nFor a reverse proxy server listening on port 443 (HTTPS) for inbound connections add and edit the following connector attributes to suit your setup.\r\n\r\n```xml\r\n<connector ...\r\n   proxyName=\"example.com\"\r\n   proxyPort=\"443\"\r\n   scheme=\"https\"\r\n   ...\r\n></connector>\r\n```\r\n\r\n## Contributions\r\n[![Docker Build Status](http://hubstatus.container42.com/cptactionhank/atlassian-jira)](https://registry.hub.docker.com/u/cptactionhank/atlassian-jira)\r\n[![Build Status](https://travis-ci.org/cptactionhank/docker-atlassian-jira.svg)](https://travis-ci.org/cptactionhank/docker-atlassian-jira)\r\n\r\nThis has been made with the best intentions and current knowledge so it shouldn't be expected to be flawless. However you can support this too with best practices and other additions. Travis-CI has been setup to build the Dockerfile and run acceptance tests on the application image to ensure it is tested and working.\r\n\r\nOut of date documentation, version, lack of tests, etc. why not help out by either creating an issue and open a discussion or sending a pull request with modifications.\r\n\r\nAcceptance tests are performed by Travis-CI in Ruby using the RSpec framework.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}